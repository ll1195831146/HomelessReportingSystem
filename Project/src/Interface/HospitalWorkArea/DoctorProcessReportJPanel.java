/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.HospitalWorkArea;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Hospital.Ward;
import Business.Hospital.WardDirectory;
import Business.Organization.ClothInstitute;
import Business.Organization.FoodInstitute;
import Business.Organization.Hospital;
import Business.Organization.Organization;
import Business.Organization.Police;
import Business.Organization.ShelterInstitute;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.ReportWorkRequest;
import Business.WorkQueue.WorkRequest;
import Business.network.City;
import Business.network.Country;
import Business.network.State;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import Business.Organization.Hospital;
import Business.Organization.School;
/**
 *
 * @author linke
 */
public class DoctorProcessReportJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DoctorProcessReportJPanel
     */
    JPanel userProcessContainer;
    ReportWorkRequest request;
    private ArrayList<Organization> allorganization;
    private ArrayList<City> allcity;
    private EcoSystem system;
    private UserAccount userAccount;
    private WardDirectory wardDirectory;
    private Hospital hospital;
    
    public DoctorProcessReportJPanel(JPanel userProcessContainer, ReportWorkRequest request, EcoSystem system, UserAccount account, Hospital hospital) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.request = request;
        cbxAdmit.addItem("Yes");
        cbxAdmit.addItem("No");
        cbxAdmit.addItem("Translate To Other Hospital");
        this.allorganization = new ArrayList<>();
        this.allcity = new ArrayList<>();
        this.system = system;
        this.userAccount = account;
        this.hospital = hospital;
        conditionLabel.setText(this.request.getCondition());
        this.wardDirectory = new WardDirectory();
        Ward ward1 = new Ward();
        Ward ward2 = new Ward();
        Ward ward3 = new Ward();
        Ward ward4 = new Ward();
        ward1.setWardNumber("B201");
        ward2.setWardNumber("B202");
        ward3.setWardNumber("A203");
        ward4.setWardNumber("A204");
        wardDirectory.addWard(ward1);
        wardDirectory.addWard(ward2);
        wardDirectory.addWard(ward3);
        wardDirectory.addWard(ward4);
        
        for(Country country: system.getCountryList()){
            for (State state :country.getStatelist()){
                for(City c:state.getCitylist()){
                    allcity.add(c);
                    
                }
            }
        }
        for(City city :allcity){
            for(Enterprise e:city.getEnterprisedirectory().getEnterpriselist()){
                for(Organization o:e.getOrganizationDirectory().getOrganizationList()){
                    allorganization.add(o);       
                }
            }
        }
        
        tblWard.setVisible(false);
        btnAssignroom.setVisible(false);
        populateTable();
    }
    
    private void populateTable(){
        DefaultTableModel dtm = (DefaultTableModel)tblWard.getModel();
        dtm.setRowCount(0);
         for (Ward ward : wardDirectory.getWardList())
        {     
            Object row[] = new Object[2];
            row[0] = ward;
            row[1] = ward.getPatientNumber();
            dtm.addRow(row);
        
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        submitJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        cbxAdmit = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        conditionLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblWard = new javax.swing.JTable();
        btnAssignroom = new javax.swing.JButton();
        enterpriseLabel = new javax.swing.JLabel();

        submitJButton.setText("Submit Result");
        submitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitJButtonActionPerformed(evt);
            }
        });

        backJButton.setText("Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        cbxAdmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxAdmitActionPerformed(evt);
            }
        });

        jLabel1.setText("Admit to hospital");

        jLabel2.setText("Homeless Condition:");

        conditionLabel.setText("<Condition>");

        tblWard.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Room No.", "Patient Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblWard);
        if (tblWard.getColumnModel().getColumnCount() > 0) {
            tblWard.getColumnModel().getColumn(0).setResizable(false);
            tblWard.getColumnModel().getColumn(1).setResizable(false);
        }

        btnAssignroom.setText("Assign Ward");
        btnAssignroom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignroomActionPerformed(evt);
            }
        });

        enterpriseLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        enterpriseLabel.setText("Hospital Report Work Area:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(63, 63, 63)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(submitJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbxAdmit, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(backJButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAssignroom, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(5, 5, 5)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(enterpriseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(33, 33, 33)
                                    .addComponent(conditionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(247, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(enterpriseLabel)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(conditionLabel))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxAdmit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(submitJButton)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backJButton)
                    .addComponent(btnAssignroom))
                .addContainerGap(46, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void submitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitJButtonActionPerformed
        boolean hospitalpass = true;
        if((cbxAdmit.getSelectedItem()).toString().equals("No")){
            JOptionPane.showMessageDialog(null, "Hospital Passed!");
            request.setStatus("Hospital Passed");
            request.setReceiver(null);
        }else if((cbxAdmit.getSelectedItem()).toString().equals("Yes")){
            hospitalpass = false;
            JOptionPane.showMessageDialog(null, "Please assign a room");
            tblWard.setVisible(true);
            btnAssignroom.setVisible(true);
            request.setStatus("Hospital Failed");
        }else if(cbxAdmit.getSelectedItem().toString().equals("Translate To Other Hospital")){
            TranslateHospital translatehospitalJPanel = new TranslateHospital(userProcessContainer, request, system,userAccount, hospital);
            userProcessContainer.add("TranslateHospital", translatehospitalJPanel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }
        request.setHospitalpass(hospitalpass);
        System.out.println(hospitalpass);
        if(request.isHospitalpass()==true){
            UserAccount ua = request.getSender();
            int age = request.getAge();
            int points=ua.getPoints();
            points += 10;
            ua.setPoints(points);
            System.out.println(age);
            if(age<=18)
            {
                
                Organization org = null;
                for (Organization organization : allorganization){
                    org = null;
                    if (organization instanceof School){
                    org = organization;
                
                    }
                    if (org!=null){
                    org.getWorkQueue().getWorkRequestList().add(request);
                    }
                }
 
                if (org!=null){
                    userAccount.getWorkQueue().getWorkRequestList().add(request);
                }
            }
            if(request.isFood()==true)
            {
                
                Organization org = null;
                for (Organization organization : allorganization){
                    org = null;
                    System.out.println(allorganization);
                    if (organization instanceof FoodInstitute){
                    org = organization;
                    }
                    if (org!=null){
                    org.getWorkQueue().getWorkRequestList().add(request);
                    }
                }
                
 
                if (org!=null){
                    userAccount.getWorkQueue().getWorkRequestList().add(request);
                }
            }
            if(request.isClothes()==true)
            {
                
                Organization org = null;
                for (Organization organization : allorganization){
                    org = null;
                    if (organization instanceof ClothInstitute){
                    org = organization;
                    }
                    if (org!=null){
                    org.getWorkQueue().getWorkRequestList().add(request);
                    }
                }
                if (org!=null){
                    userAccount.getWorkQueue().getWorkRequestList().add(request);
                }
            }
            if(request.isShelter()==true)
            {
                
                Organization org = null;
                for (Organization organization : allorganization){
                    org = null;
                    if (organization instanceof ShelterInstitute){
                     org = organization;
                    }
                    if (org!=null){
                    org.getWorkQueue().getWorkRequestList().add(request);
                    }
                }
                if (org!=null){
                    userAccount.getWorkQueue().getWorkRequestList().add(request);
                }
            }
        }
        
    }//GEN-LAST:event_submitJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        HospitalWorkAreaJPanel dwjp = (HospitalWorkAreaJPanel) component;
        dwjp.populateTable();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void cbxAdmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxAdmitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxAdmitActionPerformed

    private void btnAssignroomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignroomActionPerformed
        // TODO add your handling code here:
         int selectedRow = tblWard.getSelectedRow();
         boolean a = false;
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please Select a row first");
        }
        
        Ward ward = (Ward)tblWard.getValueAt(selectedRow, 0);
        if(ward.getPatientNumber()>=4){
            JOptionPane.showMessageDialog(null, "Cannot assign to this ward! It is at full strength");
        }
        for (Ward w : wardDirectory.getWardList())
        {     
            for (ReportWorkRequest r : w.getPatientlist())
            {     
                if(r.getFacenumber()==request.getFacenumber())
                {
                    
                    a = true;
                    break;
                }
            }
        }
        if(a==true){
            JOptionPane.showMessageDialog(null, "The homeless person has already be assigned. Please don't repeat the operation");
        }
        else{
        int n = ward.getPatientNumber();
        n++;
        ward.setPatientNumber(n);
        ward.addReportWorkRequest(request);
        JOptionPane.showMessageDialog(null, "Assign Successfully");
        
        populateTable();
        }
    }//GEN-LAST:event_btnAssignroomActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JButton btnAssignroom;
    private javax.swing.JComboBox<String> cbxAdmit;
    private javax.swing.JLabel conditionLabel;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton submitJButton;
    private javax.swing.JTable tblWard;
    // End of variables declaration//GEN-END:variables
}
